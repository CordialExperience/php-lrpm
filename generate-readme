#!/usr/bin/env php
<?php

declare(strict_types=1);
error_reporting(E_ALL);

probeForAutoloader($argv[0]);

use PHPLRPM\ConfigurationValidator;

$sections = [
    'config' => [
        'marker' => "// AUTOGENERATED BLOCK: CONFIGURATION\n",
        'text' => ''
    ]
];

$configValidator = new ConfigurationValidator([]);
$configFields = $configValidator->getFields();
foreach ($configFields as $configField => $v) {
    $sections['config']['text'] .= "===== $configField" . PHP_EOL . PHP_EOL;
    $sections['config']['text'] .= $v['description'] . PHP_EOL . PHP_EOL;
    $sections['config']['text'] .= 'Mandatory: ' . ($v['mandatory'] ? 'yes' : 'no');
    if (!$v['mandatory']) {
        $sections['config']['text'] .= ' +' . PHP_EOL . 'Default value: ' . $v['default'];
    }
    $sections['config']['text'] .= PHP_EOL . PHP_EOL;
}

$readmeIn = $argc > 1 ? $argv[1] : __DIR__ . '/README.in.adoc';
$in = fopen($readmeIn, 'r');
$out = STDOUT;
if ($in) {
    while (($line = fgets($in)) !== false) {
        foreach ($sections as $section) {
            if ($line === $section['marker']) {
                fwrite($out, $section['text']);
            } else {
                fwrite($out, $line);
            }
        }
    }
    fclose($in);
} else {
    fwrite(STDERR, "Error opening input file $readmeIn for reading" . PHP_EOL);
}

function probeForAutoloader($programName): void
{
    $autoload_locations = [
        __DIR__ . '/vendor/autoload.php',
        __DIR__ . '/../../autoload.php'
    ];

    foreach ($autoload_locations as $autoload_file) {
        if (file_exists($autoload_file)) {
            require_once($autoload_file);
            return;
        }
    }

    fwrite(STDERR, $programName . ': could not find autoload.php, use PHP Composer to generate autoloader code' . PHP_EOL);
    exit(EXIT_AUTOLOADER_NOT_FOUND);
}
